defmodule Macdonald do
  @moduledoc """
    맥도날드 주문 계산 함수 한글버전
  """

  @spec 모든_메뉴_출력_이름(map()) :: {:ok}
  def 모든_메뉴_출력_이름(메뉴들) do
    Enum.each(메뉴들, fn 메뉴 -> IO.inspect(메뉴[:이름]) end)
  end

  @spec 모든_주문_출력_가격(map()) :: {:ok}
  def 모든_주문_출력_가격(메뉴들) do
    Enum.each(메뉴들, &IO.inspect(&1[:가격]))
  end

  @spec 주문_있으면_반환_메뉴_가격(map(), string()) :: integer()
  defp 주문_있으면_반환_메뉴_가격(메뉴들, 주문) do
    Enum.find_value(메뉴들, fn 메뉴_맵 -> if 메뉴_맵[:이름] == 주문, do: 메뉴_맵[:가격] end)
  end

  @spec 반환_총_가격(map(), list()) :: integer()
  defp 반환_총_가격(메뉴들, 주문들) do
    Enum.reduce(주문들, 0, fn 메뉴, 가산자 -> 가산자 + 주문_있으면_반환_메뉴_가격(메뉴들, 메뉴) end)
  end

  def 총_가격_출력(메뉴들, 주문들) do
    총합계 = 반환_총_가격(메뉴들, 주문들)
    "주문하신 메뉴들의 총 가격은 #{총합계} 입니다."
  end
end

맥도날드_메뉴_리스트 = [
  %{이름: "감자튀김", 가격: 1500},
  %{이름: "불고기버거", 가격: 2000},
  %{이름: "새우버거", 가격: 3500},
  %{이름: "빅맥", 가격: 4000},
  %{이름: "맥치킨", 가격: 3000},
  %{이름: "콜라", 가격: 2000}
]

고객0_주문 = ["빅맥", "감자튀김", "콜라"]
고객1_주문 = ["불고기버거", "감자튀김"]

맥도날드_메뉴_리스트 |> Macdonald.모든_메뉴_출력_이름()
맥도날드_메뉴_리스트 |> Macdonald.모든_주문_출력_가격()

Macdonald.총_가격_출력(맥도날드_메뉴_리스트, 고객0_주문)
|> IO.inspect()

Macdonald.총_가격_출력(맥도날드_메뉴_리스트, 고객1_주문)
|> IO.inspect()
